# -*- coding: utf-8 -*-
"""Max_Likelihood_Estimation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dhd2VgrppwZG0fcWlYYuAhW1ShLDi7Av
"""

import numpy as np


def likelihood(x, mu, sigma):
    n = len(x)
    log_likelihood = -n/2*np.log(2*np.pi*sigma**2) - np.sum((x-mu)**2)/(2*sigma**2)
    return log_likelihood

def d_likelihood_mu(x, mu, sigma):
    n = len(x)
    d_log_likelihood_mu = np.sum((mu-x)/(sigma**2))
    return d_log_likelihood_mu

def d_likelihood_sigma(x, mu, sigma):
    n = len(x)
    d_log_likelihood_sigma = -n/(2*sigma**2) + np.sum((x-mu)**2)/(2*sigma**4)
    return d_log_likelihood_sigma


def maximum_likelihood_estimation(x):
    mu = np.mean(x)
    sigma = np.std(x)

    alpha = 0.1
    epsilon = 1e-5

    while True:
        d_mu = d_likelihood_mu(x, mu, sigma)
        d_sigma = d_likelihood_sigma(x, mu, sigma)
        mu -= alpha*d_mu
        sigma -= alpha*d_sigma

        if np.abs(d_mu) < epsilon and np.abs(d_sigma) < epsilon:
            break

    return mu, sigma

np.random.seed(123)
x = np.random.normal(loc=5, scale=2, size=100)

mu, sigma = maximum_likelihood_estimation(x)

print('mu:', mu)
print('sigma:', sigma)